# Copyright (C) 2015 Yuuki Enomoto <mail@e-yuuki.org>
#
# All rights reserved.
# Please read README for details.
#

#	$NetBSD: INSTALL_TINY,v 1.134.4.1 2012/06/12 17:47:53 riz Exp $
#
#	This kernel should be derived from INSTALL (which is derived
#	from GENERIC) with some features commented out.
#
#	This kernel has been optimized for space. It is targeted towards
#	small memory machines (4M). It has no SCSI, PCI or EISA. It does
#	have pcmcia, for old laptops.
#

include "arch/i386/conf/std.i386"

#options 	INCLUDE_CONFIG_FILE	# embed config file in kernel binary

makeoptions	COPTS="-Os"		# Optimise for space. Implies -O2
makeoptions	USE_SSP="no"

# Enable the hooks used for initializing the root memory-disk.
options 	MEMORY_DISK_HOOKS
options 	MEMORY_DISK_IS_ROOT	# force root on memory disk
options 	MEMORY_DISK_SERVER=1	# make the ramdisk writeable
options 	MEMORY_DISK_ROOT_SIZE=16384	# size of memory disk, in blocks
options 	MEMORY_DISK_RBFLAGS=RB_SINGLE	# boot in single-user mode

maxusers	2		# estimated number of users

options 	INSECURE	# disable kernel security levels
options 	RTC_OFFSET=0	# hardware clock is this many mins. west of GMT
options 	PIPE_SOCKETPAIR		# smaller, but slower pipe(2)
no options 	EXEC_AOUT	# we don't a.out support

# Compatibility options
options 	COMPAT_BSDPTY	# /dev/[pt]ty?? ptys.

# File systems
file-system		FFS			# UFS
file-system		MSDOSFS		# MS-DOS file system
file-system		KERNFS		# /kern

# Squeeze...
options 	NVNODE=50
options 	NBUF=20
options 	BUFPAGES=20

# Kernel root file system and dump configuration.
config		netbsd	root on ? type ?

#
# Device configuration
#

# USB Controller and Devices

ehci*   at pci? dev ? function ?        # Enhanced Host Controller
gcscehci* at pci? dev ? function ?      # Enhanced Host Controller (Geode CSC)
ohci*   at pci? dev ? function ?        # Open Host Controller
uhci*   at pci? dev ? function ?        # Universal Host Controller (Intel)

usb*    at ehci?
usb*    at gcscehci?
usb*    at ohci?
usb*    at uhci?

uhub*   at usb?
uhub*   at uhub? port ?

# USB Mass Storage
umass*  at uhub? port ? configuration ? interface ?
wd*     at umass?

# Basic Bus Support

# PCI bus support
pci*	at mainbus? bus ?
pci*	at pchb? bus ?
pci*	at ppb? bus ?

# PCI bridges
pchb*	at pci? dev ? function ?	# PCI-Host bridges
pcib*	at pci? dev ? function ?	# PCI-ISA bridges
ppb*	at pci? dev ? function ?	# PCI-PCI bridges

# PCMCIA bus support
pcmcia* at pcic? controller ? socket ?

# ISA PCMCIA controllers
pcic0	at isa? port 0x3e0 iomem 0xd0000 iosiz 0x10000
pcic1	at isa? port 0x3e2 iomem 0xe0000 iosiz 0x4000

# EISA bus support
eisa0	at mainbus?

# ISA bus support
isa0	at mainbus?
isa0	at pcib?

# Console Devices

# wscons
pckbc0		at isa?			# PC keyboard controller
pckbd*		at pckbc?		# PC keyboard
pcdisplay0	at isa?			# CGA, MDA, EGA, HGA
wsdisplay*	at pcdisplay? console ?
wskbd*		at pckbd? console ?

# SCSI Controllers and Devices

# SCSI bus support
scsibus* at scsi?

# SCSI devices
sd*	at scsibus? target ? lun ?	# SCSI disk drives

# IDE and related devices

# PCMCIA IDE controllers
wdc*	at pcmcia? function ?

# ST506, ESDI, and ISA IDE controllers
# Use flags 0x01 if you want to try to use 32bits data I/O (the driver will
# fall back to 16bits I/O if 32bits I/O are not functional).
# Some controllers pass the initial 32bit test, but will fail later.
wdc0	at isa? port 0x1f0 irq 14 flags 0x00
wdc1	at isa? port 0x170 irq 15 flags 0x00

# ATA (IDE) bus support
atabus* at ata?

# IDE drives
wd*	at atabus? drive ?		# the drives themselves

# ATAPI bus support
atapibus* at atapi?

# ATAPI devices
sd*	at atapibus? drive ?		# ATAPI disk drives

# disk/mass storage pseudo-devices
pseudo-device	md			# memory disk device (ramdisk)

options 	NO_DEV_PTM
